new local changes required to be tracked and pushed to the repo
*********************

1. i have existing project and want to start verison it:
	start tracking (.git folder appears):	$ git init
	list the .git has appeard:				$ ls -al

2. i don't want to track the project by git anymore
	delete the .git

3. adding file to the ignore list in order not to be tracked
	let git create a file where ignore-list may be provided:	$ touch .gitignore
	
4. main stages
* Working directory - not staged things yet that are only in our working dir and nobody is aware of these changes yet		
* Staging area - where we organize thing to be commited and delivered
* .git directory (Repository) - when we commit the staged things

* list the local changes:					$ git status
* add all changes to the staging area:	$ git add -A
* i don't want to commit yet and whant to untrack:	$ git reset <filename>
			untrack everything from stagingarea:	$ git reset
* commit changes by appearing change history to the .git (to the repository):	$ git commit -m "initial commit adding existing files to git dir"

5. show commits with their unique generated hash values:	$ git log

*********************


1. git clone <remote_repo.git> <location where to place in local location>: $ git clone https://github.com/tomasba/play_git.git .

2. view information about remote directory
											$ git remote -v
	show all branches (local + remote):		$ git branch -a

3. commiting a change and push to branch

* commit
$ git diff
$ git status
$ git add -A
$ git commit -m "modified readme file"

* push
- pull any changes from remote repository since the last pull. keep in sync with remote:	$ git pull origin master

- push to remote:		$ git push origin master
'origin' - is the remote repository name. for more details invoke $ git remote -v
'master' - is the branch that we want to push to


*********************

branching

new branch
1. create a branch: 	$ git branch <new_branch_name>
2. start working on new branch (switch to the branch):		$ git checkout <new_branch_name>
3. push that new branch to the remote repository: $ git push -u origin <new_branch_name>
'-u' - associate our local <new_branch_name> with the remote <new_branch_name> after that future pushes won't require '-u origin <new_branch_name>' ('$ git pull' or '$ git push') would know which local to remote branch must be used

merge new branch with master branch
swith to a master branch:	$ git checkout master
pull any changes made remotely in master branch to have locally up-to-date master:	$ git pull origin master
show merged branches into the current master branch: 	$ git branch --merged
merge the <new_branch_name> to the master branch:	$ git merge <new_branch_name>
$ git push origin master

	
	
	